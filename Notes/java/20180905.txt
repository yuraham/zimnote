Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-05T10:04:43+09:00

====== 20180905 ======
Created 수요일 05 9월 2018

===== 문자 =====
1. 원시데이타
	-char b = 'A'일때 만일 또 b에 b = 'A2'라는 값을 준다면 'A'는 사라지고 'A2'의 값을 가지며 'A'일때와는 다른 주소를 갖는다.
		='A'는 쓰레기통에 버려진다.
3. 거의 활용되지 않는다고 생각될 정도로 활용성이 적다.
4. 문자 a를 표현하는 다양한 방식
	-char a1 = 'a'  //a  > 문자값
	-char a2 = 97  //a  > 아스키코드값
	-char a = '\u0061';  //a  > 유니코드값
		=아스키코드 : 미국표준코드표(한글X, 영어+특수기호로 이루어져있다.)


===== 문자열 =====
1. 문자열 표현방식
	-String a = "Happy Java";  > literal 표기
	-String a = new String("Happy Java");  > 객체표기
		=첫번재 방식으로 사용하는 것이 좋다.(가독성의 이점, 컴파일 시 최적화에 도움)
		=리터럴로 표기가 가능하지만 primitive 자료형은 아니다.
2. equals : 두개의 문자열이 동일한 값을 가지고 있는지를 비교. True, False 반환
	-a.equals(b)
3. indexOf : 특정 문자가 시작되는 인덱스를 리턴.
	-a.indexOf("Java")
	-java는 숫자를 0부터 센다.
4. replaceAll : 특정 문자를 다른 문자로 바꾸고 싶을 때 사용.
	-a.replaceAll("Java", "World")
5. substring : 문자열 중 특정부분을 뽑아낼 경우 사용.
	-a.substring(0, 4)
	-끝위치까지의 문자를 뽑아내되 끝위치는 포함되지 않는다.
		=시작위치 <= a < 끝위치
6. toUpperCase : 문자열을 모두 대문자로 변경하고자 할때 사용.
	-소문자 : toLowerCase
	-a.toUpperCase()


===== StringBuffer =====
1. 문자열을 추가하거나 변경할 때 주로 사용하는 자료형.
2. append : 문자열추가 가능
		-StringBuffer sb = new StringBuffer();
		sb.append("hello");
		sb.append(" ");
		sb.append("jump to java");
		System.out.println(sb.toString());
	//hello jump to java
	-toString()메소드를 이용하면 String 자료형으로 변경할 수 있다.
		=toString()메소드를 이요하지 않는다면 결과는 동일하지만 내부적으로 객체가 생성되고 메모리가 사용되는 과정은 다르다.
		-String temp = "";
		temp += "hello";
		temp += " ";
		temp += "jump to java";
		System.out.println(temp);
	//hello jump to java
	-위의 경우 StringBuffer 객체 한번만 생성되지만 아래의 경우 String자료형에 +연산이 있을 때마다 자바는 새로운 String 객체가 생성한다.
		=String 자료형은 한번 값이 생성되면 그 값을 변경할 수 없다. : immutable
		=String 자료형은 값이 변경될때마다 heap의 예전 메모리는 쓰레기통으로 들어가고 새로운 메모리가 생겨 그곳의 주소로 연결된다.(원시데이터X)
		=StringBuffer는 값을 변경할 수 있다. : mutable
		=값이 변경할 수 있다해서 StringBuffer가 무조건 좋은 것은 X. String보다 무겁고 메모리 사용량도 많고 속도도 느리다.
2. insert : 특정 위치에 원하는 문자열 삽입 가능
		-StringBuffer sb = new StringBuffer();
		sb.append("jump to java");
		sb.insert(0, "hello ");
		System.out.println(sb.toString());
3. substring : String 자료형의 substring 메소드와 사용법 동일.


===== 배열 =====
1. 배열이란 자료형의 종류가 아닌 집합을 의미.
2. 집합 표현
	- 숫자 : int[] odds = {1, 3, 5, 7, 9};  //1차원 배열
	- 요일(문자열) : -String[] weeks = {"월", "화", "수", "목", "금", "토", "일"};  //1차원 배열
3. 배열의 길이는 고정되어 있다.
	-String[] weeks = new String[7];
	-초기값 없이 배열 변수를 만들때에는 반드시 길이값이 필요하다.
		=String[] weeks = new String[];  //컴파일 오류
	-컴파일 언어는 사전에 미리 자료형을 만들어 놓는다 = 메모리의 방의 크기를 정해놓는다.
	-속도가 빠르다는 장점이 있다.
	-참조데이터로 1번방의 참조위치(주소)만을 가지고 있다. 이후 정해진 크키만큼 순서대로 메모리가 지정되어 순차적으로 관리가 가능하다.
4. 배열의 값 접근
	-인덱싱 : weeks[3]  //"목"
5. 배열의 길이 : length
	-for문에서의 사용도 가능하다.
	-for (int i=0; i<weeks.length; i++) {
		System.out.println(weeks[i]);
	}
6. 배열의 오류 : ArrayOutOfBoundsExcepiton
	-배열의 길이는 총 7개인데 8번재의 값을 얻으려 시도하면 얻는 오류.


===== 리스트 =====
1. 크기가 정해져 있지 않다. = 동적이다. 배열보다 느리다.
	-new로 생성시 값을 정해주지 않아도 만들 수 있다.
2. 여러가지 형태가 있다.
	-ArrayList, LinkedList 등
3. ArrayList
	-사용시 상단에 import해야함
	-add : 리스트에 내용 삽입
		=ArrayList pitches = new ArrayList();
		pitches.add("138");
		pitches.add("129");
		pitches.add("142");
		= J2SE 5.0 버전 이후부터 ArrayList<String> pitches = new ArrayList<String>(); 이런식으로 객체를 포함하는 자료형도 어떤 객체를 포함하는지에 대해서 명확하게 표현하는것을 권고한다. = 제너릭스
	-get : 인덱스의 값 추출
		=pitches.get(1)
	-size : ArrayList의 갯수를 리턴
		 =pitches.size()
	-contains : 해당 값이 있는지 판별하여 boolean으로 리턴한다.
		=pitches.contains("142")  //True
	-remove : 리스트에서 해당 내용 삭제
		=remove(객체)
			pitches.remove("129")  //True
		=remove(인덱스)
			pitches.remove(0)  //138


===== 제너릭스 =====
1. J2SE 5.0 버전 이후부터 도입된 개념.
2. 명확한 타입체크가 가능하게 해준다.
3. 제너릭스를 사용하지 않은 경우
	-ArrayList aList = new ArrayList();
	aList.add("hello");
	aList.add("java");
	String hello = (String) aList.get(0);
	String java = (String) aList.get(1);
	=ArrayList 안에 추가되는 객체는 단순한 Object 자료형으로 인식.
	=ArrayList 객체인 aList에 값을 넣을 때는 문제가 안되지만 값을 가져올 경우에는 항상 Object 자료형에서 String 자료형으로 다음과 같이 형변환(casting)을 해 주어야만 한다.
4. 제네릭스로 자료형을 선언하기만 하면 그 이후로는 자료형에 대한 형변환 과정이 필요없다.


===== 맵 =====
1. 사전(dictionary)와 비슷.
2. 리스트나 배열처럼 순차적으로(sequential) 해당 요소값을 구하지 않고 key를 통해 Value를 얻는다.
3. 인터페이스를 구현한 HashMap, LinkedHashMap, TreeMap등의 형식이 있다.
4. HashMap > 제네릭스 이용
	-put : key와 Value를 입력한다.
		=HashMap<String, String> map = new HashMap<String, String>();
		map.put("people", "사람");
		map.put("baseball", "야구");
	-get : 해당되는 Value값을 얻을 수 있다.
		=map.get("people")  //"사람"
	-containsKey : 맵에 해당 키가 있는지를 조사하여 그 결과값을 리턴.
		=map.containsKey("people")  //True
	-remove : key값에 해당되는 아이템(key, value)을 삭제한 후 그 value 값을 리턴.
		=map.remove("people")  //"사람"
	-size : 맵의 개수를 리턴.
		=map.size()
5. LinkedHashMap : 입력된 순서대로 데이터가 출력되는 특징을 가지고 있다.
6. TreeMap :  입력된 key의 소트순으로 데이터가 출력되는 특징을 가지고 있다.



====== 제어문 ======

===== if문 =====
1. 조건문 : 참과 거짓을 판단하는 문
	-if (조건문) {
		수행문장1;
	}else {
		수행문장2;
	}
	-조건문을 테스트해서 참이면 수행문장1 실행, 거짓이면 수행문장2 실행
2. 비교연산자 : 조건판단에선 boolean보다 비교연산자를 더 많이 사용한다.
	- > / < / == / != / >= / <=
3. 논리연산자 : and(&&), or(||), not(!)
4. contains : List자료형에 해당 아이템이 있는지 조사하는 메소드로 조건문에서 자주 쓰인다.
5. 다중 조건 판단 : else if


===== switch/case 문 =====
1. if문과 비슷하지만 좀 더 정형화된 제어문
	-switch(입력변수) {
		case 입력값1: 수행문장1
			 break;
		case 입력값2: 수행문장2
			 break;
		...
		default: ...
			 break;
	}
	-입력변수와 case 입력값1이 일치한다면 수행문장 1이 수행되며 이하 문 종료
	-case에 해당되는 내용이 없다면 default의 수행문장 실행
2. "입력변수가 확실하다면" if분보다 가독성에서 좀 더 유리하다.
3. switch/case문은 if else구조로 변경 가능하지만 그 반대는 불가능하다.

===== while =====
1. 반복해서 문장을 수행해야 할 경우 사용.
	-while (조건문) {
		<수행할 문장1>
		<수행할 문장2>
		<수행할 문장3>
		...
	}
	-조건문이 참일 동안 while문 아래의 문장들을 계속해서 수행한다.
2. 무한루프 : 무한히 반복.
	-while (true) {    
		<수행할 문장1>     
		<수행할 문장2>
		...
	}
	-while의 조건문이 true이므로 항상 참, 계속 반복된다.
	-ctrl+c를 누르면 빠져나갈 수 있다.(이클립스에선 중지버튼)
3. break : while문을 강제로 멈추게 할 수 있다.
4. continue : while문의 맨 처음(조건문)으로 돌아가게 할 때 사용한다.
	-int a = 0;
	while (a < 10) {
		a++;
		if (a % 2 == 0) {
			continue;
		}
		System.out.println(a);
	}


===== for =====
1. 구문 : for (초기치; 조건문; 증가치)
2. while문과 비슷하지만 컴팩트하게 잘 짜여진 느낌.
3. continue : for문의 맨 처음(조건문)으로 돌아가게 할 때 사용한다.
4. for문을 쓰는 부분을 while로 바꿀 수 있는 경우가 많고 while문을 쓴 부분을 for문으로 바꾸어서 사용할 수 있는 경우가 많다.



====== 객체지향 프로그래밍 ======

===== 클래스 =====
1. public class 클래스 이름 {
}
	-public : js와 다른점. 접근제어자. public을 쓰지 않아도 기본 접근제어자인 프라이빗이 있다.(단 대부분 상속 등을 위해 퍼블릭을 위주로 많이 사용한다.)
2. 객체(Object)를 만드는 기능을 가지고 있다.
	-Animal cat = new Animal();
	-Animal타입이자 Animal클래스의 인스턴스인 cat이 만들어진다. = Animal의 객체가 만들어진다.
	-객체와 인스턴스의 차이
		=cat은 객체. cat이라는 객체는 Animal의 인스턴스.
		=인스턴스라는 말은 특정 객체(cat)가 어떤 클래스(Animal)의 객체인지를 관계위주로 설명할 때 사용
3. 하나의 클래스로 무수히 많은 동물 인스턴스를 만들어 낼 수 있다.
4. 객체변수(Instance Variable)
	-객체변수 = 인스턴스변수 = 멤버변수 = 속성
	-도트연산자를 이용한 접근 : 객체.객체변수
5. 메소드(Method)
	-메소드는 클래스 내에 구현된 함수를 의미. class내의 동작을 지시하는 코드들의 집합.
	-객체.메소드
	-this는 Animal 클래스에 의해서 생성된 객체를 지칭(객체 자신)
6. 객체변수는 공유되지 않는다.
	-객체의 변수의 값이 독립적으로 존재.
	-    public static void main(String[] args) {
			Animal cat = new Animal();
			cat.setName("boby");
	
			Animal dog = new Animal();
			dog.setName("happy");
		}
	-System.out.println(cat.name);  //boby
	System.out.println(dog.name);  //happy
		= name변수는 공유되지 않는다.
		= 단, static을 이용하게 되면 객체 변수를 공유하도록 만들 수도 있다.
7. 진행순서
	-클래스 생성 > public static void main생성 > 클래스의 멤버변수 생성 > 인스턴스 및 실행내용 생성, 작성


