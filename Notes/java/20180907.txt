Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-07T10:16:23+09:00

====== 20180907 ======
Created 금요일 07 9월 2018


===== 생성자 =====
1. 생성자의 규칙대로만 객체가 생성, 강제한다. 생성자의 초기화를 어떻게 할 것인가를 속성으로 정함.
2. 생성자의 규칙
	-클래스명과 메소드명이 동일하다.
	-리턴타입을 정의하지 않는다.
3. 생성자는 객체가 생성될(new) 때 호출된다.
4. default 생성자
	-생성자의 입력항목이 없고 생성자 내부에 아무 내용이 없는 생성자
	-생성자가 없다면 자동으로 생성자가 추가된다.
		=생성자가 있는 경우 추가하지 않음
		=public class Dog extends Animal {
			public void sleep() {
				System.out.println(this.name + " zzz");
			}
		}
		=public class Dog extends Animal {
			public Dog() {  //디폴트생성자 추가
			//아무 내용 없다면 적지 않는 것과 동일
	}
			public void sleep() {
				System.out.println(this.name + " zzz");
			}
		}
5. 생성자 오버로딩
	-public class HouseDog extends Dog {
		public HouseDog(String name) {
			this.setName(name);
		}
	
		public HouseDog(int type) {
			if (type == 1) {
				this.setName("yorkshire");
			} else if (type == 2) {
				this.setName("bulldog");
			}
		//만약 3을 입력한다면 에러가 뜨지는 않고 null상태.
		}
	-입력 항목이 다른 생성자를 여러개 만들 수 있다.
	-메소드 오버로딩과 동일한 개념
	-인스턴스를 만들 때 입력값에 따라 다양한 형태의 인스턴스를 만들 수 있다.
6.this
		=public class Person {
			int age;
			String name;
			String address;
	
			public Person() {
				this(0, null, null);
			}
			public Person(int age) {
				this(age, null, null);
			}
			public Person(int age, String name) {
				this(age, name, null);
			}
			public Person(int age, String name, String address) {
				this.age = age;
				this.name = name;
				this.address = address;	
			}
		}
		=this()는 생성자 person의 실행을 의미한다.
		=this.age는 값을 가져오는 것.
		=this.age가 없다면 this()는 오류가 난다.
7. super
	-class가 인스턴스화 될때 생성자가 
	-부모의 생성자부터 실행 및 초기화. super : 부모 클래스 / super() : 부모 클래스의 생성
-super() 컴파일러가 자동으로 부모의 생성자를 호출하면서 부모객체를 초기화. super()을 호출할때와 호출하지 않을때가 같다.
-생성자 생성 > 컴파일러
 생성자 호출 > super
-public class Car {
	public Car(String name) {
		System.out.println("car의 기본생성자입니다."+name);
	}
}
-public class Bus extends Car {
	// super()  부모 클래스의 생성자에 매개변수가 없다면 쓰나 안쓰나 같다.
	public Bus(String name) {
		super(name); //매개변수가 있다면 필수로 써야한다.
		System.out.println("Bus의 기본생성자입니다.");
	}
}
-public class BusExam {
	public static void main(String args[]) {
		Bus b = new Bus("Han"); //Bus객체가 메모리에 올라갈때 Car의 객체도 올라간다.
	}
}


메소드의 시그니쳐
1. 메소드의 형태를 정의하는 사항들
	-오버라이딩을 하기 위해 충족되어야 할 시그니쳐들
		=메소드의 이름
		=메소드 매개변수의 숫자와 데이터 타입, 순서
		=메소드의 리턴 타입




