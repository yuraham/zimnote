Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-12T09:51:57+09:00

====== 20180912 ======
Created 수요일 12 9월 2018

===== 예외처리 =====
1. try-catch
	-try에서 예외가 발생하지 않는다면 catch 다음문장 실행x
	-try {
		...
	} catch {
		...
	}
2. fainally
	-어떤 예외와 관계없이 반드시 실행
3. 예외발생시키기
	-throws
		=예외를 뒤로 미루기
		=예외를 던질 수 있다.
	-RuntimeException
		=프로그램으로 해결할 수 없는 오류들이 있을 때(본체상의 문제)
		=예외처리를 강제하지 않기 때문에 언체크예외라 불린다.
		=프로그램 실행시 발생하는 에러
		=발생 할수도 안할수도 있을 때
	-Exception
		=컴파일시 발생하는 예외
		=반드시 예외처리코드 필요
			catch문으로 잡던지 throw를 정의해 메소드 밖으로 던져야한다.
		=이미 예측가능한 예외 작성시 사용
4. 트랜잭션
	-하나의 처리화. 하나의 작업단위.
		=반드시 동시에 이뤄져야 하는 것
	-하나라도 실패하면 전부 취소하고 되돌린다. = 롤백
	-수도코드(슈도코드)
		=일반적인 언어로 코드를 흉내내어 알고리즘을 사용한 코드.
		=알고리즘의 모델을 대략적으로 메딜링하는데 사용.
5. throws와 catch의 차이
	-throw : 트랜잭션을 모두 실행하느냐
	-catch : 하나만 실행하느냐
	-완벽한 트랜잭션
		상품발송() {
			try{
				포장();
				영수증발행();
				발송();
			}catch(예외) {
				모두취소();
			}
		}
		포장() throws 예외 {
			...
		}
		영수증발행() throws 예외 {
			...
		}
		발송() throws 예외 {
			...
		}
		
쓰레드
1. 프로세스 : 동작하는 프로그램. 무언가를 실행하는 것. 시작부터 끝나는 과정
	-프로세스는 동시에 두가지 일을 하지 못한다.
	-쓰레드 이용시 두가지 일을 동시에 가능하게 한다.
2. 원래의 작업 처리시 cpu가 제일 빨라 실행하는 사이 틈이 있다. 그 사이에 다른 작업을 실행한다.
3. start실행시 run메소드가 수행되도록 코딩
	-Thread 클래스 상속
	-Thread 클래스 run 메소드 구현
	-text.start() 실행시 test 객체의 run 메소드 실행



