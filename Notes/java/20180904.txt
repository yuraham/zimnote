Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-04T15:53:29+09:00

====== 20180904 ======
Created 화요일 04 9월 2018

===== 패키지 =====
1. 자바클래스가 위치하고 있는 디렉토리명과 일치.
	-자기만 가지고 있는 걸 사용한다.(ex) 도메인 주소, 주로 큰 것부터 반대로 적는다.)
	-java.ch2 형식의 경우 java 폴더 속 ch2패키지에 속해있다는 뜻.
2. 파일 이름과 클래스 이름은 동일하다.
	-myCalc.java / myCalc.class


===== main =====
1. 프로그램의 시작을 의미.
2. 한 프로젝트를 진행할때마다 빼먹서는 안되는 꼭 필요한 메소드
3. 하나만 사용할 수 있다.
4. publick static void main형식으로 고정된다.
	-ex) publick static void main(String[] args) {}
	-publick static void > 키워드
		=publick : 접근권한 확인(접근제어자), public은 누구나 이 메소드에 접근할 수 있다는 의미
		=static : 메소드에 static 이 지정되어 있는 경우 이 메소드는 인스턴스 생성없이 실행 할 수 있음을 의미
		=void: 리턴값. 메소드의 리턴값이 없음(void: 사전적으로 "텅 빈" 이라는 뜻)을 의미
		=String[] args: String 자료형에 대한 변수명. 한 개가 아닌 여러개의 값으로 이루어진 배열임을 의미
	-메소드 입력의 파라미터는 String[] args에 저장.
	-프로젝트 생성시 하단의 publick static void main(String[] args)버튼 클릭시 자동으로 적혀져 나온다.
5. main 메소드를 포함하고 있는 클래스를 이클립스에서 실행시키려면 이클립스 메뉴에서 Run -> Run As -> Java Application 을 실행하면 된다.


===== 변수 =====
1. 구문 : 자료형 (변수명) = 값;
2. 변수 생성시 주의사항
	-변수명은 숫자로 시작할 수 없다.
	-_(underscore)와 $ 문자 이외의 특수문자는 사용할 수 없다.
	-자바의 키워드는 변수명으로 사용할 수 없다.(예: int, class, return 등)
		=자바 키워드
		abstract  continue  for         new        switch
		assert    default   goto        package    synchronized
		boolean   do        if          private    this
		break     double    implements  protected  throw
		byte      else      import      public     throws
		case      enum      instanceof  return     transient
		catch     extends   int         short      try
		char      final     interface   static     void
		class     finally   long        strictfp   volatile
		const     float     native      super      while
2. 기본 자료형
	-int a;
		=해석 : int 자료형의 변수 a. 숫자형만 담을 수 있다.
	-long
	-double
	-boolean
	-char
	-String
	-StringBuffer
	-List(python 리스트 비슷한것)
	-Map(python 딕셔너리 비슷한것)
	-하단의 자료형 참고.
3. 사용자 정의 자료형
	-class Animal {}이라는 클래스를 만들면 Animal cat;이라는 Animal 자료형 변수를 만들 수 있다.
	-해석: cat이라는 변수는 Animal 자료형의 변수이다. cat이라는 변수는 Animal 자료형에 해당되는 값만 담을 수 있다.
4. 변수 선언
	-변수 선언 후 값을 대입할 수 있다.
		=int a;
		=a = 1;
	-변수 선언과 동시에 대입 가능
		=int a = 1;
	-자료형과 다른 값 대입시 오류가 뜬다.
		=int a = 'Hello java" -> 오류


===== 주석 =====
1. /* 아에이오우 */ ->블록 주석
2. // ->라인주석

===== 자료형 =====
1. Primitive
	-Number
		=integer
			byte(8bit)
			short
			int(정수)
			long
			char(글자 하나)
		=floating point type
			float
			double(소수 표현 기본)
	-Boolean
		=Boolean(참/거짓)
2. Reference
	-class
	-Interface
	-Array
	-Enum(열거타입)


===== 숫자 =====
1. 정수를 표현하기 위한 자료형 : int, long
	-int : -2147483648 ~ 2147483647 (32비트를 계산한 값의 범위)
	-long: -9223372036854775808 ~ 9223372036854775807 (64비트를 계산한 값의 범위)
	-ex)
		int age = 10;
		long countOfStar = 8764827384923849L;
	-정수형의 디폴트는 int이므로 int보다 큰 값을 사용할 때  8764827384923849L과 같이 L 접미사를 붙여 주어야 한다.
2. 실수를 표현하기 위한 자료형: float, double
	- 실수형은 디폴트가 double이므로 float 변수에 값을 대입할 때에는 3.14F 와 같이 F접미사를 꼭 붙여 주어야 한다.
	-지수 표현도 가능. ex) double d2 = 1.234e2;
3. 8진수와 16진수는 int를 사용하요 표기 할 수 있다.
	-0(숫자 '0')으로 시작하면 8진수, 0x(숫자 '0' + 알파벳 'x')로 시작하면 16진수가 된다.
		=int a = 023;
			8^1*2+8^0*3 = 19
		=int a = 0xC;
			16^0*C = 12
4. 숫자연산(사칙연산) : +-/*
	-나머지 값 반환 > %
5. 증감연산: ++, —
	-++ 연산자가 변수명 뒤에 붙으면 해당 코드가 실행되는 순간에는 i 값이 변경되지 않는다.
		=i++ : 값이 참조된 후에 증가
		=++i : 값이 참조되기 전에 증가


===== 부울 =====
1. 참 거짓만 가능
	-boolean isSuccess = true;
	-boolean isTest = false;
3. 부울 연산
	-참, 거짓을 판단하는 연산을 말한다.
		=2 > 1  //참
		= 1 == 2  //거짓
		= "3".equals("2")  //거짓
	-if문, 부울 자료형등에 쓰일 수 있다.
3. 조건문의 판단 기준으로 많이 사용된다.
	-int a = "2"
	-int b = "2"
	-a.equals(b) //참
		= a == b일 경우 원시데이터는 각각마다 주소가 달라 False가 나오는데 이 주소를 제외한 오로지 '값'만을 비교할 때 사용하는 함수

